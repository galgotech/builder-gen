//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by main. DO NOT EDIT.

package test

import (
	json "encoding/json"

	intstr "k8s.io/apimachinery/pkg/util/intstr"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func NewTestBuilder() *TestBuilder {
	builder := &TestBuilder{}
	builder.model = Test{}
	builder.testa = NewTestABuilder()
	builder.testblist = []*TestBBuilder{}
	builder.testblistpointer = []*TestBBuilder{}
	builder.testbalias = []*TestBBuilder{}
	return builder
}

type TestBuilder struct {
	model            Test
	testa            *TestABuilder
	testb            *TestBBuilder
	testblist        []*TestBBuilder
	testblistpointer []*TestBBuilder
	testbalias       []*TestBBuilder
}

func (b *TestBuilder) Key(input string) *TestBuilder {
	b.model.Key = input
	return b
}

func (b *TestBuilder) Tas(input int) *TestBuilder {
	b.model.Tas = input
	return b
}

func (b *TestBuilder) TestPkgType(input *intstr.IntOrString) *TestBuilder {
	b.model.TestPkgType = input
	return b
}

func (b *TestBuilder) TestA() *TestABuilder {
	return b.testa
}

func (b *TestBuilder) TestB() *TestBBuilder {
	if b.testb == nil {
		b.testb = NewTestBBuilder()
	}
	return b.testb
}

func (b *TestBuilder) AddTestBList() *TestBBuilder {
	builder := NewTestBBuilder()
	b.testblist = append(b.testblist, builder)
	return builder
}

func (b *TestBuilder) RemoveTestBList(remove *TestBBuilder) {
	for i, val := range b.testblist {
		if val == remove {
			b.testblist[i] = b.testblist[len(b.testblist)-1]
			b.testblist = b.testblist[:len(b.testblist)-1]
		}
	}
}
func (b *TestBuilder) TestBMap(input map[string]TestB) *TestBuilder {
	b.model.TestBMap = input
	return b
}

func (b *TestBuilder) AddTestBListPointer() *TestBBuilder {
	builder := NewTestBBuilder()
	b.testblistpointer = append(b.testblistpointer, builder)
	return builder
}

func (b *TestBuilder) RemoveTestBListPointer(remove *TestBBuilder) {
	for i, val := range b.testblistpointer {
		if val == remove {
			b.testblistpointer[i] = b.testblistpointer[len(b.testblistpointer)-1]
			b.testblistpointer = b.testblistpointer[:len(b.testblistpointer)-1]
		}
	}
}
func (b *TestBuilder) AddTestBAlias() *TestBBuilder {
	builder := NewTestBBuilder()
	b.testbalias = append(b.testbalias, builder)
	return builder
}

func (b *TestBuilder) RemoveTestBAlias(remove *TestBBuilder) {
	for i, val := range b.testbalias {
		if val == remove {
			b.testbalias[i] = b.testbalias[len(b.testbalias)-1]
			b.testbalias = b.testbalias[:len(b.testbalias)-1]
		}
	}
}
func (b *TestBuilder) TestBAliasMap(input map[string]*TestB) *TestBuilder {
	b.model.TestBAliasMap = input
	return b
}

func (b *TestBuilder) TestJsonAlias(input json.RawMessage) *TestBuilder {
	b.model.TestJsonAlias = input
	return b
}

func (b *TestBuilder) Build() Test {
	b.model.TestA = b.testa.Build()
	if b.testb != nil {
		testb := b.testb.Build()
		b.model.TestB = &testb
	}
	b.model.TestBList = []TestB{}
	for _, v := range b.testblist {
		b.model.TestBList = append(b.model.TestBList, v.Build())
	}
	b.model.TestBListPointer = []*TestB{}
	for _, v := range b.testblistpointer {
		vv := v.Build()
		b.model.TestBListPointer = append(b.model.TestBListPointer, &vv)
	}
	b.model.TestBAlias = []*TestB{}
	for _, v := range b.testbalias {
		vv := v.Build()
		b.model.TestBAlias = append(b.model.TestBAlias, &vv)
	}
	return b.model
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func NewTestABuilder() *TestABuilder {
	builder := &TestABuilder{}
	builder.model = TestA{}
	builder.model.Test1Tag()
	builder.model.Test2Tag()
	builder.testb = NewTestBBuilder()
	return builder
}

type TestABuilder struct {
	model TestA
	testb *TestBBuilder
}

func (b *TestABuilder) TestB() *TestBBuilder {
	return b.testb
}

func (b *TestABuilder) Build() TestA {
	b.model.TestB = b.testb.Build()
	return b.model
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func NewTestBBuilder() *TestBBuilder {
	builder := &TestBBuilder{}
	builder.model = TestB{}
	builder.model.TestTag()
	return builder
}

type TestBBuilder struct {
	model TestB
}

func (b *TestBBuilder) TestBKey(input string) *TestBBuilder {
	b.model.TestBKey = input
	return b
}

func (b *TestBBuilder) Build() TestB {
	return b.model
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func NewTestDBuilder() *TestDBuilder {
	builder := &TestDBuilder{}
	builder.model = TestD{}
	return builder
}

type TestDBuilder struct {
	model TestD
}

func (b *TestDBuilder) KeyD(input int) *TestDBuilder {
	b.model.KeyD = input
	return b
}

func (b *TestDBuilder) Build() TestD {
	return b.model
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func NewTestEBuilder() *TestEBuilder {
	builder := &TestEBuilder{}
	builder.model = TestE{}
	return builder
}

type TestEBuilder struct {
	model TestE
	*TestDBuilder
	testg *TestGBuilder
}

func (b *TestEBuilder) TestD() *TestDBuilder {
	if b.TestDBuilder == nil {
		b.TestDBuilder = NewTestDBuilder()
	}
	return b.TestDBuilder
}

func (b *TestEBuilder) KeyD(input int) *TestEBuilder {
	b.TestDBuilder.KeyD(input)
	return b
}

func (b *TestEBuilder) KeyE(input int) *TestEBuilder {
	b.model.KeyE = input
	return b
}

func (b *TestEBuilder) TestG() *TestGBuilder {
	if b.testg == nil {
		b.testg = NewTestGBuilder()
	}
	return b.testg
}

func (b *TestEBuilder) Build() TestE {
	if b.TestDBuilder != nil {
		testd := b.TestDBuilder.Build()
		b.model.TestD = &testd
	}
	if b.testg != nil {
		testg := b.testg.Build()
		b.model.TestG = &testg
	}
	return b.model
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func NewTestFBuilder() *TestFBuilder {
	builder := &TestFBuilder{}
	builder.model = TestF{}
	builder.TestEBuilder = *NewTestEBuilder()
	return builder
}

type TestFBuilder struct {
	model TestF
	TestEBuilder
}

func (b *TestFBuilder) KeyE(input int) *TestFBuilder {
	b.TestEBuilder.KeyE(input)
	return b
}

func (b *TestFBuilder) Build() TestF {
	b.model.TestE = b.TestEBuilder.Build()
	return b.model
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func NewTestGBuilder() *TestGBuilder {
	builder := &TestGBuilder{}
	builder.model = TestG{}
	return builder
}

type TestGBuilder struct {
	model TestG
}

func (b *TestGBuilder) KeyG(input int) *TestGBuilder {
	b.model.KeyG = input
	return b
}

func (b *TestGBuilder) Build() TestG {
	return b.model
}
